% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Searcher.R
\name{Searcher}
\alias{Searcher}
\title{Get a searcher of the omop databse}
\description{
Get a searcher of the omop databse

Get a searcher of the omop databse
}
\examples{
search = Searcher$new(omop)
}
\keyword{omop}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{omop}}{the omop connection}

\item{\code{result}}{the search result}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Searcher$new()}}
\item \href{#method-mapToStandardConcepts}{\code{Searcher$mapToStandardConcepts()}}
\item \href{#method-mapToRelatedConcepts}{\code{Searcher$mapToRelatedConcepts()}}
\item \href{#method-expandAncestorConcepts}{\code{Searcher$expandAncestorConcepts()}}
\item \href{#method-expandDescendantConcepts}{\code{Searcher$expandDescendantConcepts()}}
\item \href{#method-applyStandardFilters}{\code{Searcher$applyStandardFilters()}}
\item \href{#method-applyDomainFilter}{\code{Searcher$applyDomainFilter()}}
\item \href{#method-applyVocabularyFilter}{\code{Searcher$applyVocabularyFilter()}}
\item \href{#method-applyConceptClassesFilter}{\code{Searcher$applyConceptClassesFilter()}}
\item \href{#method-applyTermFilter}{\code{Searcher$applyTermFilter()}}
\item \href{#method-applyUsedInFilter}{\code{Searcher$applyUsedInFilter()}}
\item \href{#method-applyFilter}{\code{Searcher$applyFilter()}}
\item \href{#method-setExclude}{\code{Searcher$setExclude()}}
\item \href{#method-setUnion}{\code{Searcher$setUnion()}}
\item \href{#method-setIntersect}{\code{Searcher$setIntersect()}}
\item \href{#method-getDomains}{\code{Searcher$getDomains()}}
\item \href{#method-getVocabularies}{\code{Searcher$getVocabularies()}}
\item \href{#method-getConceptClasses}{\code{Searcher$getConceptClasses()}}
\item \href{#method-getRelationshipIds}{\code{Searcher$getRelationshipIds()}}
\item \href{#method-persist}{\code{Searcher$persist()}}
\item \href{#method-compute}{\code{Searcher$compute()}}
\item \href{#method-toDataframe}{\code{Searcher$toDataframe()}}
\item \href{#method-summary}{\code{Searcher$summary()}}
\item \href{#method-save}{\code{Searcher$save()}}
\item \href{#method-print}{\code{Searcher$print()}}
\item \href{#method-printSql}{\code{Searcher$printSql()}}
\item \href{#method-clone}{\code{Searcher$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
create a vocabulary searcher
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$new(omop)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{omop}}{an R6 Omop object}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mapToStandardConcepts"></a>}}
\subsection{Method \code{mapToStandardConcepts()}}{
get standard concept equivalents for a set of concepts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$mapToStandardConcepts()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a searcher of related standard concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mapToRelatedConcepts"></a>}}
\subsection{Method \code{mapToRelatedConcepts()}}{
get standard concept equivalents for a set of concepts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$mapToRelatedConcepts(relationships)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{relationships}}{a list of relationship ids as a string (see getRelationshipIds())}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a searcher of related standard concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expandAncestorConcepts"></a>}}
\subsection{Method \code{expandAncestorConcepts()}}{
get ancestors for a set of concepts from the current generation upwards
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$expandAncestorConcepts(min = 0, max = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{min}}{the minimum number of levels to find}

\item{\code{max}}{the maximum number of levels to find}

\item{\code{df}}{optional dataframe - if none will use the searcher$result}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a searcher of ancestor concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expandDescendantConcepts"></a>}}
\subsection{Method \code{expandDescendantConcepts()}}{
get a distinct set of descendants including current generation for a set of concepts - N.B. only works if they are standard concepts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$expandDescendantConcepts(min = 0, max = 1000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{min}}{the minimum number of levels to find}

\item{\code{max}}{the maximum number of levels to find}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a searcher of descendant concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyStandardFilters"></a>}}
\subsection{Method \code{applyStandardFilters()}}{
get rid of entries we are not interested in
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$applyStandardFilters()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{optional dataframe - if none will modify the searcher$result}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame or searcher$result of filtered concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyDomainFilter"></a>}}
\subsection{Method \code{applyDomainFilter()}}{
filter domains
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$applyDomainFilter(domainList)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{domainList}}{a domain filter (if length one supports wildcard)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a searcher of filtered concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyVocabularyFilter"></a>}}
\subsection{Method \code{applyVocabularyFilter()}}{
find vocabulary identifiers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$applyVocabularyFilter(vocabList)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vocabList}}{a vocabulary filter (if length one supports wildcard)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a searcher of filtered concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyConceptClassesFilter"></a>}}
\subsection{Method \code{applyConceptClassesFilter()}}{
list concept classes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$applyConceptClassesFilter(classList)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{classList}}{a concept class filter (if length one supports wildcard)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a searcher of filtered concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyTermFilter"></a>}}
\subsection{Method \code{applyTermFilter()}}{
perform a search of a data frame or the current selection of concepts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$applyTermFilter(term)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{term}}{an input search string}

\item{\code{df}}{optional dataframe - if none will modify the searcher$result}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame or searcher$result of filtered concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyUsedInFilter"></a>}}
\subsection{Method \code{applyUsedInFilter()}}{
selects concepts which are used in a specific vocabulary and returns the results
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$applyUsedInFilter(df, field = "concept_id")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{a dataframe with a concept id field}

\item{\code{field}}{the name of the field containing concept_ids}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the searcher subset to include only concepts used in the df
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyFilter"></a>}}
\subsection{Method \code{applyFilter()}}{
retain or exclude concepts based on a set of rules
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$applyFilter(filter)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{a dplyr filter}

\item{\code{df}}{optional dataframe - if none will modify the searcher$result}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame or searcher$result of filtered concepts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setExclude"></a>}}
\subsection{Method \code{setExclude()}}{
exclude concepts present in a dataframe
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$setExclude(searcher)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{searcher}}{the concepts to exclude}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the modified searcher itself
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setUnion"></a>}}
\subsection{Method \code{setUnion()}}{
append concepts from a dataframe
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$setUnion(searcher)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{searcher}}{the concepts to append}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the modified searcher itself
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setIntersect"></a>}}
\subsection{Method \code{setIntersect()}}{
append concepts from a dataframe
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$setIntersect(searcher)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{searcher}}{the concepts to append}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the modified searcher itself
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDomains"></a>}}
\subsection{Method \code{getDomains()}}{
list domains in result
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$getDomains()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{a dataframe with a concept_id field}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame of domain_id and counts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getVocabularies"></a>}}
\subsection{Method \code{getVocabularies()}}{
list vocabulary identifiers in result
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$getVocabularies()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{a dataframe with a concept_id field}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame of vocabulary_id and counts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getConceptClasses"></a>}}
\subsection{Method \code{getConceptClasses()}}{
list concept classes in result
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$getConceptClasses()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{a dataframe with a concept_id field}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame of concept_class_id and counts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getRelationshipIds"></a>}}
\subsection{Method \code{getRelationshipIds()}}{
explore available concept_relationships for current set of concepts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$getRelationshipIds()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{a dataframe with a concept_id field}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame of relationship_id and count
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-persist"></a>}}
\subsection{Method \code{persist()}}{
execute a dplyr::compute
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$persist(tablename)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the searcher with a cached result
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute"></a>}}
\subsection{Method \code{compute()}}{
execute a dplyr::compute
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$compute()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the searcher with a cached result
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-toDataframe"></a>}}
\subsection{Method \code{toDataframe()}}{
gets the result as a dataframe
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$toDataframe()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the subset as a data frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-summary"></a>}}
\subsection{Method \code{summary()}}{
shows the result as a list of concept_names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$summary(max = 200)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{max}}{the maximum number of rows to return}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the subset as a data frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save"></a>}}
\subsection{Method \code{save()}}{
saves the data locally
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$save(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{the name of the file - initial part of path}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the searcher itself (not modified)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
print the searcher and number of results
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the searcher itself (not modified)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-printSql"></a>}}
\subsection{Method \code{printSql()}}{
print the searcher and number of results
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$printSql()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the searcher itself (not modified)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Searcher$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
